import { Controller, Post, Get, Body, Param, ParseIntPipe } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam } from '@nestjs/swagger';
import { ValidationResultService } from '../services/validation-result.service';
import { SaveValidationResultDto } from '../models/dto/save-validation-result.dto';

@ApiTags('Validation Results')
@Controller('validation-results')
export class ValidationResultController {
  constructor(private readonly validationResultService: ValidationResultService) {}

  @Post()
  @ApiOperation({ summary: 'Guardar resultado de validaci√≥n de costos' })
  @ApiResponse({ status: 201, description: 'Resultado de validaci√≥n guardado exitosamente.' })
  @ApiResponse({ status: 400, description: 'Datos inv√°lidos.' })
  async saveValidationResult(@Body() saveDto: SaveValidationResultDto) {
    console.log('üì• [VALIDATION-CONTROLLER] Recibida petici√≥n para guardar validaci√≥n:', saveDto);
    
    const result = await this.validationResultService.saveValidationResult(saveDto);
    
    console.log('‚úÖ [VALIDATION-CONTROLLER] Validaci√≥n guardada exitosamente');
    return {
      success: true,
      message: 'Resultado de validaci√≥n guardado exitosamente',
      data: result,
    };
  }

  @Get('business/:negocioId/module/:moduloId')
  @ApiOperation({ summary: 'Obtener resultado de validaci√≥n por negocio y m√≥dulo' })
  @ApiParam({ name: 'negocioId', description: 'ID del negocio' })
  @ApiParam({ name: 'moduloId', description: 'ID del m√≥dulo' })
  @ApiResponse({ status: 200, description: 'Resultado de validaci√≥n encontrado.' })
  @ApiResponse({ status: 404, description: 'No se encontr√≥ validaci√≥n.' })
  async getValidationResultByBusinessAndModule(
    @Param('negocioId', ParseIntPipe) negocioId: number,
    @Param('moduloId', ParseIntPipe) moduloId: number,
  ) {
    console.log(`üîç [VALIDATION-CONTROLLER] Buscando validaci√≥n para negocio ${negocioId} y m√≥dulo ${moduloId}`);
    
    const result = await this.validationResultService.getValidationResultByBusinessAndModule(negocioId, moduloId);
    
    if (!result) {
      return {
        success: false,
        message: 'No se encontr√≥ validaci√≥n para el negocio y m√≥dulo especificados',
        data: null,
      };
    }

    console.log('‚úÖ [VALIDATION-CONTROLLER] Validaci√≥n encontrada');
    return {
      success: true,
      message: 'Validaci√≥n encontrada exitosamente',
      data: result,
    };
  }

  @Get('business/:negocioId')
  @ApiOperation({ summary: 'Obtener todos los resultados de validaci√≥n de un negocio' })
  @ApiParam({ name: 'negocioId', description: 'ID del negocio' })
  @ApiResponse({ status: 200, description: 'Resultados de validaci√≥n encontrados.' })
  async getValidationResultsByBusiness(@Param('negocioId', ParseIntPipe) negocioId: number) {
    console.log(`üîç [VALIDATION-CONTROLLER] Buscando todas las validaciones del negocio ${negocioId}`);
    
    const results = await this.validationResultService.getValidationResultsByBusiness(negocioId);
    
    console.log(`‚úÖ [VALIDATION-CONTROLLER] Encontradas ${results.length} validaciones`);
    return {
      success: true,
      message: `Se encontraron ${results.length} validaciones`,
      data: results,
    };
  }
}
