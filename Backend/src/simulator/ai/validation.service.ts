import { Injectable } from '@nestjs/common';
import { AiService } from './ai.service';
import { PromptService } from './prompt.service';

@Injectable()
export class ValidationService {
  constructor(
    private readonly aiService: AiService,
    private readonly promptService: PromptService,
  ) {}

  /**
   * Valida los costos de forma r√°pida (2-3 segundos)
   */
  async validateCosts(
    costs: Array<{ name: string; amount: string }>,
    businessInfo: { tipoNegocio: string; tamano: string; ubicacion: string }
  ) {
    try {
      console.log('üîç [VALIDATION-SERVICE] Iniciando validaci√≥n r√°pida...');
      
      // Generar prompt optimizado para validaci√≥n r√°pida
      const prompt = this.promptService.generateValidationPrompt(costs, businessInfo);
      
      console.log('üìù [VALIDATION-SERVICE] Prompt generado, llamando a IA...');
      
      // Llamar a la IA con timeout m√°s corto para validaci√≥n r√°pida
      const response = await this.aiService.analyzePrompt(prompt, 10000); // 10 segundos timeout
      
      console.log('‚úÖ [VALIDATION-SERVICE] Respuesta de IA recibida');
      
      // Parsear la respuesta JSON
      const parsedResponse = this.parseAiResponse(response);
      
      console.log('üîÑ [VALIDATION-SERVICE] Respuesta parseada:', parsedResponse);
      
      return {
        success: true,
        data: parsedResponse,
        timestamp: new Date().toISOString(),
        duration: 'rapid_validation'
      };
      
    } catch (error) {
      console.error('üí• [VALIDATION-SERVICE] Error en validaci√≥n:', error);
      
      return {
        success: false,
        error: error.message,
        timestamp: new Date().toISOString(),
        duration: 'rapid_validation_failed'
      };
    }
  }

  /**
   * Parsea la respuesta de la IA para extraer el JSON
   */
  private parseAiResponse(response: string): any {
    try {
      // Intentar extraer JSON del response
      const jsonMatch = response.match(/```(?:json)?([\s\S]*?)```/);
      const jsonString = jsonMatch ? jsonMatch[1] : response;
      
      return JSON.parse(jsonString);
    } catch (error) {
      console.error('üí• [VALIDATION-SERVICE] Error parseando respuesta:', error);
      throw new Error('Respuesta de IA no v√°lida');
    }
  }

  /**
   * Valida si los costos pasan la validaci√≥n b√°sica
   */
  isValidationSuccessful(validationResult: any): boolean {
    try {
      return validationResult?.resumen_validacion?.puede_proseguir_analisis === true;
    } catch (error) {
      console.error('üí• [VALIDATION-SERVICE] Error validando resultado:', error);
      return false;
    }
  }
}
